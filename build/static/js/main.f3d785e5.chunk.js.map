{"version":3,"sources":["components/cell/Cell.js","components/grid/Grid.js","components/footer/Footer.js","components/game/Game.js","App.js","serviceWorker.js","index.js"],"names":["Cell","className","this","props","id","React","Component","Grid","matrix","generateGrid","flatMatrix","_","flatMapDeep","row","flatten","children","activeCells","sampleSize","activeCellsCount","Array","rows","keys","columns","map","r","key","c","Footer","hints","gameState","defaultProps","ready","memorize","recall","Game","state","setTimeout","setState","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","then","registration","unregister","catch","error","console","message"],"mappings":"4VAWeA,G,mLANP,OAAO,yBAAKC,UAAU,QAClB,0BAAMA,UAAU,UAAhB,cAAiCC,KAAKC,MAAMC,U,GAHrCC,IAAMC,YCwCVC,E,kDAnCX,WAAYJ,GAAQ,IAAD,uBACf,cAAMA,IACDK,OAAS,EAAKC,eAEnB,IAAIC,EAAaC,IAAEC,YAAY,EAAKJ,QAAQ,SAACK,GAAD,OAASF,IAAEG,QAAQD,EAAIV,MAAMY,aAJ1D,OAMf,EAAKC,YACDL,IAAEM,WAAWP,EAAY,EAAKP,MAAMe,kBAPzB,E,mDAWf,OAAO,YAAIC,MAAMjB,KAAKC,MAAMiB,MAAMC,U,gCAIlC,OAAO,YAAIF,MAAMjB,KAAKC,MAAMmB,SAASD,U,qCAGzB,IAAD,OACX,OAAOnB,KAAKkB,OAAOG,KAAI,SAACC,GAAD,OACnB,yBAAKC,IAAG,UAAKD,GAAKpB,GAAE,cAASoB,IACxB,EAAKF,UAAUC,KAAI,SAACG,GAAD,OAChB,kBAAC,EAAD,CAAMD,IAAKC,EAAGtB,GAAE,UAAKoB,GAAL,OAASE,c,+BAOrC,OAAO,yBAAKtB,GAAG,QACVF,KAAKM,Y,GA/BCH,IAAMC,WCLnBqB,E,uKAEE,OACI,yBAAK1B,UAAU,UACX,yBAAKA,UAAU,QACVC,KAAKC,MAAMyB,MAAM1B,KAAKC,MAAM0B,WADjC,Y,GAJKxB,IAAMC,WAY3BqB,EAAOG,aAAe,CAClBF,MAAO,CACHG,MAAO,YACPC,SAAU,WACVC,OAAQ,WAIDN,QCIAO,E,kDApBX,WAAY/B,GAAQ,IAAD,8BACf,cAAMA,IACDgC,MAAQ,CAAEN,UAAW,SAFX,E,gEAKE,IAAD,OAChBO,YAAW,kBAAM,EAAKC,SAAS,CAAER,UAAW,eAAe,KAC3DO,YAAW,kBAAM,EAAKC,SAAS,CAAER,UAAW,aAAa,O,+BAIzD,OACI,6BACI,kBAAC,EAAD,CAAMT,KAAMlB,KAAKC,MAAMiB,KAAME,QAASpB,KAAKC,MAAMmB,QAASJ,iBAAkBhB,KAAKC,MAAMe,mBACvF,kBAAC,EAAWhB,KAAKiC,Y,GAfd9B,IAAMC,WCQVgC,MARf,WACE,OACE,yBAAKrC,UAAU,aACb,kBAAC,EAAD,CAAMmB,KAAM,EAAGE,QAAS,EAAGJ,iBAAkB,MCI/BqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcnB,MACrBoB,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f3d785e5.chunk.js","sourcesContent":["import React from 'react';\nimport './Cell.css';\n\nclass Cell extends React.Component {\n    render() {\n        return <div className=\"cell\">\n            <span className=\"cellId\">{`row-${this.props.id}`}</span>\n        </div>;\n    }\n}\n\nexport default Cell;","import React from 'react';\n\nimport _ from 'lodash';\n\nimport './Grid.css';\nimport Cell from '../cell/Cell';\n\nclass Grid extends React.Component {\n    constructor(props) {\n        super(props);\n        this.matrix = this.generateGrid();\n\n        let flatMatrix = _.flatMapDeep(this.matrix, (row) => _.flatten(row.props.children));\n\n        this.activeCells = \n            _.sampleSize(flatMatrix, this.props.activeCellsCount);\n    }\n\n    rows() {\n        return [...Array(this.props.rows).keys()];\n    }\n\n    columns() {\n        return [...Array(this.props.columns).keys()];\n    }\n\n    generateGrid() {\n        return this.rows().map((r) => ( \n            <div key={`${r}`} id={`row-${r}`}>\n                {this.columns().map((c) => (\n                    <Cell key={c} id={`${r}${c}`} />\n                ))}\n            </div>\n        ));\n    }\n\n    render() {\n        return <div id=\"grid\">\n            {this.matrix}\n        </div>\n    }\n}\n\nexport default Grid;","import React from 'react';\n\nclass Footer extends React.Component {\n    render() {\n        return (\n            <div className=\"footer\">\n                <div className=\"hint\">\n                    {this.props.hints[this.props.gameState]}...\n                </div>\n            </div>\n        );\n    }\n}\n\nFooter.defaultProps = {\n    hints: {\n        ready: \"Get Ready\",\n        memorize: \"Memorize\",\n        recall: \"Recall\"\n    }\n}\n\nexport default Footer;","import React from 'react';\n\nimport Grid from '../grid/Grid';\nimport Footer from '../footer/Footer';\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { gameState: 'ready' }; \n    }\n\n    componentDidMount() { \n        setTimeout(() => this.setState({ gameState: 'memorize' }), 2000);\n        setTimeout(() => this.setState({ gameState: 'recall' }), 4000);\n    }\n\n    render() {\n        return (\n            <div>\n                <Grid rows={this.props.rows} columns={this.props.columns} activeCellsCount={this.props.activeCellsCount} />\n                <Footer {...this.state} />\n            </div>\n        );\n    }\n}\n\nexport default Game;","import React from 'react';\nimport './App.css';\n\nimport Game from './components/game/Game';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Game rows={5} columns={5} activeCellsCount={6} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}